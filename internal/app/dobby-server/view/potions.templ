package view

import (
    "localdev/dobby-server/internal/app/dobby-server/view/layout"
    "localdev/dobby-server/internal/app/dobby-server/model"
    c "localdev/dobby-server/internal/app/dobby-server/view/component"
    "localdev/dobby-server/internal/pkg/hogwartsforum/dynamics/potion"
    "localdev/dobby-server/internal/pkg/hogwartsforum/tool"
    "strconv"
	"fmt"
)

templ Potions(reportList []potion.PotionClubReport, u model.UserSession, t tool.Tool, potionList []string, title string){
    @layout.Base(title, true, u, t) {
        <div class="row mb-3">
            <div class="col">
                    <a href="https://docs.google.com/spreadsheets/d/13CCYZ4veljB6ItPNHdvxvClBZJaC1w-QMkq-H5btR74/edit" style="text-decoration: none; color: var(--slytherin-color)">
                        [ Planilla de Moderación 🔗 ]
                    </a>
                </div>
            <div class="col">
                <span class="d-flex justify-content-end">
                        <button class="btn btn-primary" hx-get="/moderation/potion/new" hx-swap="outerHTML" hx-target="#formNew" data-bs-toggle="modal" data-bs-target="#newPotionModal">
                            <i class="fa fa-plus"></i> Nueva Poción </button>
                </span>
            </div>
        </div>
        for i, report := range reportList {
                @PotionReportView(i, report, t)
        }
        <!-- New Potion Modal -->
        <div class="modal fade" id="newPotionModal" tabindex="-1" aria-labelledby="newPotionModal" aria-hidden="true">
          <div class="modal-dialog" style="max-width: 75%">
            <div class="modal-content">
              <div class="modal-header">
                <h1 class="modal-title fs-5" id="newPotionModal">Nueva Poción</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
              <div id="newPotionMsg"></div>
                <div id="formNew"></div>

              </div>
            </div>
          </div>
        </div>
    }
}

templ PotionReportView(i int, r potion.PotionClubReport, t tool.Tool){
    <div>
        <table>
            <tr>
                <td>
                    <a href={GetPlayerUrl(r.Moderator, t)} target="_blank" style="text-decoration: none">
                        <span class="moderator">[{r.Moderator.Name}]</span>
                    </a>
                    <a href={GetPotionUrl(r, t)} style="text-decoration: none" class="NormalText" target="_blank">
                        <b>{r.Potion.Name}</b>
                    </a>
                    @TurnsButton(r.Thread.Url)
                </td>
                <td>
                    <a href={GetPlayerUrl(r.Player1, t)} target="_blank" style="text-decoration: none">
                        <span class={c.GetHouseClass(r.Player1.House)}>{r.Player1.Name} @PlayerBonus(r.Player1)</span>
                    </a> &
                    <a href={GetPlayerUrl(r.Player2, t)} target="_blank" style="text-decoration: none">
                        <span class={c.GetHouseClass(r.Player2.House)}>{r.Player2.Name} @PlayerBonus(r.Player2)</span>
                    </a>
                </td>
            </tr>
            <tr class="odd" style="color: var(--ds-color6)">
                <td>
                    <span class={GetStatusColor(r)}><b>Turno:</b> {GetCurrentTurn(r)}</span>
                    <span class={GetStatusColor(r)} style="margin-left: 5px; margin-right: 5px">|</span>
                    <span class={GetStatusColor(r)}><b>Tiempo transcurrido:</b> {GetElapsedTime(r)}</span>
                    <span class={GetStatusColor(r)} style="margin-left: 5px; margin-right: 5px">|</span>
                    <span class={GetStatusColor(r)}><b>Puntaje:</b> {GetScore(r)}</span>
                </td>
                <td>
                    <span class={GetStatusColor(r)}><b>Estado:</b> {GetStatus(r)}</span>
                    if r.Status == potion.StatusSuccess || r.Status == potion.StatusFail || r.Status == potion.StatusFailButMightSucceed{
                        <span style="float: inline-end">
                            @ModerateButton(r.Score.ModMessage)
                        </span>
                    }
                </td>
            </tr>
        </table>
        <div id={r.Thread.Url} style="display: none">
            @PotionTurns(r.Turns)
        </div>
    </div>
}

templ PotionTurns(turns []potion.PotionClubTurn){
    <table style="margin-top: -40px">
        <tr style="background-color: var(--ds-color5)">
            <td>Turno</td>
            <td>Jugador</td>
            <td>Dado</td>
            <td>Tiempo de respuesta</td>
            <td>A tiempo</td>
        </tr>
        for i,t := range turns {
            <tr class={c.GetRowColor(i)} style="color: var(--ds-color7)">
                <td>{strconv.Itoa(t.Number)})</td>
                <td>{t.Player.Name}</td>
                <td>{strconv.Itoa(t.DiceValue)}</td>
                if t.OnTime {
                    <td class="success">{c.PrintDurationTime(t.TimeElapsed)}</td>
                    <td class="success">SI</td>
                } else {
                    if t.DayOffUsed {
                        <td class="warning">{c.PrintDurationTime(t.TimeElapsed)}</td>
                        <td class="warning">(Permiso)</td>
                    } else {
                        <td class="danger">{c.PrintDurationTime(t.TimeElapsed)}</td>
                        <td class="danger">NO</td>
                    }
                }
            </tr>
        }
    </table>
}

func GetCurrentTurn(r potion.PotionClubReport) string {
    if len(r.Turns) == 0 {
        return "0/8"
    }
    lastTurn := r.Turns[len(r.Turns)-1]
    currTurn := strconv.Itoa(lastTurn.Number)
    turnLimit := strconv.Itoa(r.Potion.TurnLimit)
    return fmt.Sprintf("%s/%s", currTurn, turnLimit)
}

func GetElapsedTime(r potion.PotionClubReport) string {
    elapsedTime := r.ElapsedTime
    hours := int(elapsedTime.Hours())
    minutes := int(elapsedTime.Minutes()) - int(elapsedTime.Hours())*60

    return fmt.Sprintf("%dh %dm", hours, minutes)
}

func GetScore(r potion.PotionClubReport) string {
    return fmt.Sprintf("%d / %d", r.Score.DiceScoreSum, r.Score.TargetScore)
}

func GetStatus(r potion.PotionClubReport) string {
    switch r.Status {
    case potion.StatusWaitingPlayer1:
        return "Esperando a " + r.Player1.Name
    case potion.StatusWaitingPlayer2:
        return "Esperando a " + r.Player2.Name
    case potion.StatusWaitingPlayer1OnDayOff:
        return "Esperando a " + r.Player1.Name + " (permiso)"
    case potion.StatusWaitingPlayer2OnDayOff:
        return "Esperando a " + r.Player2.Name + " (permiso)"
    case potion.StatusSuccess:
        return "Éxito"
    case potion.StatusFail:
        switch r.Score.FailureReason{
        case potion.FailBecauseOfTime:
            return "Fallo (Tiempo Excedido)"
        case potion.FailBecauseOfScore:
             return "Fallo (Puntos Insuficientes)"
         case potion.FailBecauseOfEditedDice:
              return "Fallo (Edición de Dados)"
        }
        return "Fallo"
    case potion.StatusFailButMightSucceed:
        return "Exito (con puntos de Mod)"
    default:
        return "Estado desconocido"
    }
}

func GetStatusColor(r potion.PotionClubReport) string {
    switch r.Status {
    case potion.StatusSuccess:
        return "success"
    case potion.StatusFail:
        return "danger"
    case potion.StatusFailButMightSucceed:
        return "warning"
    default:
        return ""
    }
}

func GetPlayerUrl(p potion.PotionsUser, t tool.Tool) templ.SafeURL {
    baseUrl := t.Config.BaseUrl
    playerUrl := baseUrl + p.ProfileUrl
    return templ.SafeURL(playerUrl)
}

func GetPotionUrl(r potion.PotionClubReport, t tool.Tool) templ.SafeURL {
    baseUrl := t.Config.BaseUrl
    firstPostId := r.Thread.Posts[0].Id
    potionUrl := baseUrl + r.Thread.Url + "#" + firstPostId
    return templ.SafeURL(potionUrl)
}

templ ModerateButton(msg string){
    <button class="btn btn-outline-secondary mx-1" onclick={moderatePotion(msg)}>
        Moderar <i class="fas fa-wand-sparkles"></i>
    </button>
}

script moderatePotion(modMsg string){
    navigator.clipboard
        .writeText(modMsg)
        .then(() => {
        alert("Copiado al portapapeles");
        })
        .catch(() => {
        alert("Error al copiar en el portapapeles");
        });
}

templ PlayerBonus(p potion.PotionsUser) {
    if p.PlayerBonus != 0 {
        <span>(+{strconv.Itoa(p.PlayerBonus)})</span>
    }
}

templ TurnsButton(id string) {
    <a style="margin-left: 10px; color: var(--ds-color6)" onclick={toggleTurns(id)}> <b>(Ver Turnos)</b> </a>
}


script toggleTurns(id string){
    var x = document.getElementById(id);
    if (x.style.display === "none") {
        x.style.display = "block";
    } else {
        x.style.display = "none";
    }
}

templ NewPotionForm(potionList []string){
    <form hx-post="/moderation/potion/new" hx-indicator="#spinner" hx-swap="innerHTML" hx-target="#newPotionMsg">
        <div class="mb-3 form-group">
            <label for="potionName">Poción</label>
            <select class="form-control" id="potionName" name="potionName" required>
            for _, potion := range potionList {
                <option value={potion}>{potion}</option>
            }
            </select>
        </div>
        <div class="mb-3 form-group">
            <label for="player1">Jugador 1</label>
            <input type="text" class="form-control" id="player1" name="player1" required />
        </div>
        <div class="mb-3 form-group">
            <label for="player2">Jugador 2</label>
            <input type="text" class="form-control" id="player2" name="player2" required />
        </div>
        <button type="submit" class="btn btn-primary">Crear Poción</button>
    </form>
}

templ NewPotionMsg(msg string){
    <div class="form-group my-3">
        <label for="exampleFormControlTextarea1">Mensaje Generado</label>
        <textarea class="form-control" id="exampleFormControlTextarea1" rows="10" disabled>{msg}</textarea>
    </div>
    <button class="btn btn-primary my-3" onclick={moderatePotion(msg)}>
            Copiar al portapapeles <i class="fas fa-clipboard"></i>
    </button>
    <hr/>
}

